// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Zig.flex

/*
 * Copyright 2023-2024 FalsePattern
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.zigzen.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.github.zigzen.lang.psi.ZigTypes.*;


class ZigFlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STR_LIT = 2;
  public static final int CHAR_LIT = 4;
  public static final int ID_QUOT = 6;
  public static final int UNT_QUOT = 8;
  public static final int CDOC_CMT = 10;
  public static final int DOC_CMT = 12;
  public static final int LINE_CMT = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\4\1\5\1\6"+
    "\2\0\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\6\24\2\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\4\35"+
    "\1\36\1\35\11\37\1\40\12\37\1\41\1\42\1\43"+
    "\1\44\1\45\1\0\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\37\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\0\5\103\1\104\12\103\20\105\1\106\37\107"+
    "\2\110\36\111\1\112\14\113\1\114\2\113\1\115\3\116"+
    "\1\117\u018b\110\1\120\177\110\13\120\35\110\2\121\5\110"+
    "\1\120\57\110\1\120\240\110\1\120\377\110";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\20\1\21\1\22\1\23\1\24\1\25\1\26\1\1"+
    "\1\27\1\30\1\1\1\31\1\32\21\27\1\33\1\34"+
    "\1\35\1\36\2\37\1\40\13\37\1\41\1\37\1\1"+
    "\2\42\3\1\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\6\0\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\15\27\1\101\1\27\1\102\4\27\1\103\16\27"+
    "\1\104\1\105\4\0\1\106\14\0\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\0\1\121\3\20\1\122\1\123\1\124\1\77\3\27"+
    "\1\125\1\27\1\126\15\27\1\127\10\27\1\130\7\27"+
    "\1\131\3\27\1\132\2\27\6\0\1\133\1\134\1\0"+
    "\1\135\1\0\16\27\1\136\1\137\21\27\1\140\6\27"+
    "\3\0\1\133\1\134\1\121\1\27\1\141\3\27\1\142"+
    "\1\143\1\144\1\27\1\145\1\27\1\146\1\27\1\147"+
    "\1\27\1\150\20\27\1\151\3\27\1\152\2\0\10\27"+
    "\1\153\1\154\1\155\4\27\1\156\1\157\1\160\1\161"+
    "\1\162\1\163\1\27\1\164\7\27\1\165\5\27\1\166"+
    "\2\27\1\167\6\27\1\170\1\171\1\172\1\173\1\174"+
    "\1\27\1\175\4\27\1\176\1\177\1\200\1\27\1\201"+
    "\7\27\1\202\1\203\1\204\3\27\1\205";

  private static int [] zzUnpackAction() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\u0148\0\u019a\0\u01ec\0\u023e"+
    "\0\u0290\0\u02e2\0\u0334\0\u0290\0\u0386\0\u03d8\0\u0290\0\u0290"+
    "\0\u0290\0\u042a\0\u047c\0\u0290\0\u04ce\0\u0520\0\u0572\0\u05c4"+
    "\0\u0616\0\u0290\0\u0290\0\u0668\0\u06ba\0\u070c\0\u0290\0\u075e"+
    "\0\u07b0\0\u0290\0\u0802\0\u0290\0\u0854\0\u08a6\0\u08f8\0\u094a"+
    "\0\u099c\0\u09ee\0\u0a40\0\u0a92\0\u0ae4\0\u0b36\0\u0b88\0\u0bda"+
    "\0\u0c2c\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74\0\u0dc6\0\u0290\0\u0e18"+
    "\0\u0290\0\u0290\0\u0e6a\0\u0290\0\u0290\0\u0ebc\0\u0f0e\0\u0f60"+
    "\0\u0fb2\0\u1004\0\u1056\0\u10a8\0\u10fa\0\u114c\0\u119e\0\u11f0"+
    "\0\u0290\0\u1242\0\u1294\0\u0290\0\u1294\0\u12e6\0\u1338\0\u138a"+
    "\0\u0290\0\u0290\0\u0290\0\u13dc\0\u0290\0\u0290\0\u142e\0\u1480"+
    "\0\u0290\0\u0290\0\u14d2\0\u1524\0\u0290\0\u0290\0\u1576\0\u0290"+
    "\0\u15c8\0\u0290\0\u161a\0\u0290\0\u166c\0\u16be\0\u1710\0\u1762"+
    "\0\u17b4\0\u1806\0\u1858\0\u0290\0\u0290\0\u0290\0\u0290\0\u18aa"+
    "\0\u0290\0\u18fc\0\u194e\0\u0290\0\u19a0\0\u19f2\0\u1a44\0\u1a96"+
    "\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde\0\u1c30\0\u1c82\0\u1cd4\0\u1d26"+
    "\0\u1d78\0\u07b0\0\u1dca\0\u07b0\0\u1e1c\0\u1e6e\0\u1ec0\0\u1f12"+
    "\0\u1f64\0\u1fb6\0\u2008\0\u205a\0\u20ac\0\u20fe\0\u2150\0\u21a2"+
    "\0\u21f4\0\u2246\0\u2298\0\u22ea\0\u233c\0\u238e\0\u23e0\0\u0290"+
    "\0\u0290\0\u0e6a\0\u0ebc\0\u2432\0\u2484\0\u0290\0\u0f0e\0\u24d6"+
    "\0\u2528\0\u0fb2\0\u1056\0\u11f0\0\u1242\0\u257a\0\u25cc\0\u1294"+
    "\0\u261e\0\u2670\0\u26c2\0\u0290\0\u0290\0\u0290\0\u0290\0\u0290"+
    "\0\u0290\0\u0290\0\u0290\0\u0290\0\u2714\0\u2766\0\u27b8\0\u280a"+
    "\0\u285c\0\u28ae\0\u0290\0\u2900\0\u0290\0\u2952\0\u29a4\0\u29f6"+
    "\0\u2a48\0\u07b0\0\u2a9a\0\u07b0\0\u2aec\0\u2b3e\0\u2b90\0\u2be2"+
    "\0\u2c34\0\u2c86\0\u2cd8\0\u2d2a\0\u2d7c\0\u2dce\0\u2e20\0\u2e72"+
    "\0\u2ec4\0\u07b0\0\u2f16\0\u2f68\0\u2fba\0\u300c\0\u305e\0\u30b0"+
    "\0\u3102\0\u3154\0\u07b0\0\u31a6\0\u31f8\0\u324a\0\u329c\0\u32ee"+
    "\0\u3340\0\u3392\0\u07b0\0\u33e4\0\u3436\0\u3488\0\u07b0\0\u34da"+
    "\0\u352c\0\u357e\0\u35d0\0\u3622\0\u3674\0\u36c6\0\u3718\0\u376a"+
    "\0\u37bc\0\u380e\0\u0290\0\u0802\0\u3860\0\u38b2\0\u3904\0\u3956"+
    "\0\u39a8\0\u39fa\0\u3a4c\0\u3a9e\0\u3af0\0\u3b42\0\u3b94\0\u3be6"+
    "\0\u3c38\0\u3c8a\0\u07b0\0\u07b0\0\u3cdc\0\u3d2e\0\u3d80\0\u3dd2"+
    "\0\u3e24\0\u3e76\0\u3ec8\0\u3f1a\0\u3f6c\0\u3fbe\0\u4010\0\u4062"+
    "\0\u40b4\0\u4106\0\u4158\0\u41aa\0\u41fc\0\u07b0\0\u424e\0\u42a0"+
    "\0\u42f2\0\u4344\0\u4396\0\u43e8\0\u443a\0\u448c\0\u44de\0\u4530"+
    "\0\u4582\0\u45d4\0\u4626\0\u07b0\0\u4678\0\u46ca\0\u471c\0\u07b0"+
    "\0\u07b0\0\u07b0\0\u476e\0\u07b0\0\u47c0\0\u07b0\0\u4812\0\u07b0"+
    "\0\u4864\0\u07b0\0\u48b6\0\u4908\0\u495a\0\u49ac\0\u49fe\0\u4a50"+
    "\0\u4aa2\0\u4af4\0\u4b46\0\u4b98\0\u4bea\0\u4c3c\0\u4c8e\0\u4ce0"+
    "\0\u4d32\0\u4d84\0\u07b0\0\u4dd6\0\u4e28\0\u4e7a\0\u07b0\0\u12e6"+
    "\0\u1338\0\u4ecc\0\u4f1e\0\u4f70\0\u4fc2\0\u5014\0\u5066\0\u50b8"+
    "\0\u510a\0\u07b0\0\u07b0\0\u07b0\0\u515c\0\u51ae\0\u5200\0\u5252"+
    "\0\u07b0\0\u07b0\0\u07b0\0\u07b0\0\u07b0\0\u07b0\0\u52a4\0\u07b0"+
    "\0\u52f6\0\u5348\0\u539a\0\u53ec\0\u543e\0\u5490\0\u54e2\0\u07b0"+
    "\0\u5534\0\u5586\0\u55d8\0\u562a\0\u567c\0\u07b0\0\u56ce\0\u5720"+
    "\0\u07b0\0\u5772\0\u57c4\0\u5816\0\u5868\0\u58ba\0\u590c\0\u07b0"+
    "\0\u07b0\0\u07b0\0\u07b0\0\u07b0\0\u595e\0\u07b0\0\u59b0\0\u5a02"+
    "\0\u5a54\0\u5aa6\0\u07b0\0\u07b0\0\u07b0\0\u5af8\0\u07b0\0\u5b4a"+
    "\0\u5b9c\0\u5bee\0\u5c40\0\u5c92\0\u5ce4\0\u5d36\0\u07b0\0\u07b0"+
    "\0\u07b0\0\u5d88\0\u5dda\0\u5e2c\0\u07b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\4\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\3\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\4\41\1\42\1\43\1\44\1\45\1\41\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\2\41\1\54\1\41\1\55"+
    "\1\41\1\56\1\57\1\60\1\41\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\3\41\1\67\1\70\1\71\1\72"+
    "\1\11\1\12\1\11\1\12\11\11\2\12\2\73\1\74"+
    "\3\73\1\75\33\73\1\76\57\73\2\77\1\74\6\77"+
    "\1\74\30\77\1\100\40\77\6\74\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\2\74\2\110\1\74\3\110"+
    "\1\111\33\110\1\112\57\110\2\113\1\114\1\115\100\113"+
    "\1\115\14\113\1\115\21\11\1\116\121\11\1\117\121\11"+
    "\1\120\100\11\123\0\4\12\77\0\1\12\1\0\1\12"+
    "\11\0\2\12\31\0\1\121\121\0\1\122\121\0\1\123"+
    "\77\0\1\124\4\0\1\125\14\0\1\126\46\0\1\127"+
    "\30\0\1\130\5\0\1\131\13\0\1\132\46\0\1\133"+
    "\30\0\1\134\21\0\1\135\1\136\45\0\1\137\35\0"+
    "\1\140\3\0\1\141\12\0\1\142\107\0\1\143\7\0"+
    "\1\144\110\0\1\145\1\0\4\31\10\0\1\146\6\0"+
    "\1\147\1\0\1\150\2\0\1\146\10\0\1\151\10\0"+
    "\1\152\45\0\1\145\1\0\4\31\10\0\1\146\6\0"+
    "\1\147\4\0\1\146\77\0\1\153\1\154\121\0\1\155"+
    "\1\156\120\0\1\157\1\160\75\0\1\161\26\0\4\162"+
    "\4\0\32\162\45\0\4\41\7\0\4\41\4\0\32\41"+
    "\65\0\1\163\110\0\1\164\112\0\4\41\7\0\4\41"+
    "\4\0\4\41\1\165\6\41\1\166\1\41\1\167\4\41"+
    "\1\170\3\41\1\171\3\41\45\0\4\41\7\0\4\41"+
    "\4\0\21\41\1\172\10\41\45\0\4\41\7\0\4\41"+
    "\4\0\1\41\1\173\14\41\1\174\13\41\45\0\4\41"+
    "\7\0\4\41\4\0\5\41\1\175\24\41\45\0\4\41"+
    "\7\0\4\41\4\0\13\41\1\176\1\41\1\177\3\41"+
    "\1\200\5\41\1\201\2\41\45\0\4\41\7\0\4\41"+
    "\4\0\15\41\1\202\1\203\13\41\45\0\4\41\7\0"+
    "\4\41\4\0\6\41\1\204\6\41\1\205\14\41\45\0"+
    "\4\41\7\0\4\41\4\0\11\41\1\206\20\41\45\0"+
    "\4\41\7\0\4\41\4\0\16\41\1\207\13\41\45\0"+
    "\4\41\7\0\4\41\4\0\17\41\1\210\1\41\1\211"+
    "\10\41\45\0\4\41\7\0\4\41\4\0\1\41\1\212"+
    "\22\41\1\213\5\41\45\0\4\41\7\0\4\41\4\0"+
    "\5\41\1\214\24\41\45\0\4\41\7\0\4\41\4\0"+
    "\23\41\1\215\1\216\1\41\1\217\3\41\45\0\4\41"+
    "\7\0\4\41\4\0\5\41\1\220\2\41\1\221\10\41"+
    "\1\222\10\41\45\0\4\41\7\0\4\41\4\0\15\41"+
    "\1\223\4\41\1\224\7\41\45\0\4\41\7\0\4\41"+
    "\4\0\1\41\1\225\14\41\1\226\13\41\45\0\4\41"+
    "\7\0\4\41\4\0\10\41\1\227\21\41\54\0\1\230"+
    "\46\0\1\231\21\0\2\232\1\0\3\232\1\75\33\232"+
    "\1\233\57\232\6\0\1\232\2\0\1\232\30\0\1\232"+
    "\17\0\1\232\3\0\1\232\1\0\1\232\1\234\2\0"+
    "\1\235\36\0\1\236\116\0\1\237\2\0\1\237\30\0"+
    "\1\237\17\0\1\237\3\0\1\237\1\0\1\237\1\240"+
    "\2\0\1\241\130\0\5\237\120\0\2\242\115\0\5\242"+
    "\115\0\3\242\121\0\3\243\115\0\5\243\115\0\2\243"+
    "\15\0\2\244\1\0\3\244\1\111\33\244\1\245\57\244"+
    "\6\0\1\244\2\0\1\244\30\0\1\244\17\0\1\244"+
    "\3\0\1\244\1\0\1\244\1\246\2\0\1\247\25\0"+
    "\2\250\1\114\1\115\100\250\1\115\14\250\1\115\21\0"+
    "\1\251\121\0\1\252\121\0\1\253\131\0\1\254\121\0"+
    "\1\255\121\0\1\256\121\0\1\257\121\0\1\260\121\0"+
    "\1\261\110\0\1\262\106\0\1\263\13\0\1\264\122\0"+
    "\4\265\111\0\1\266\1\0\1\266\2\0\4\267\116\0"+
    "\4\31\116\0\2\270\120\0\3\271\117\0\4\272\7\0"+
    "\2\272\7\0\6\272\77\0\1\273\46\0\1\274\52\0"+
    "\1\275\112\0\4\162\7\0\4\162\4\0\32\162\23\0"+
    "\2\163\1\276\117\163\22\0\4\41\7\0\4\41\4\0"+
    "\4\41\1\277\25\41\45\0\4\41\7\0\4\41\4\0"+
    "\11\41\1\300\1\41\1\301\16\41\45\0\4\41\7\0"+
    "\4\41\4\0\4\41\1\302\23\41\1\303\1\41\45\0"+
    "\4\41\7\0\4\41\4\0\14\41\1\304\13\41\1\305"+
    "\1\41\45\0\4\41\7\0\4\41\4\0\1\41\1\306"+
    "\30\41\45\0\4\41\7\0\4\41\4\0\5\41\1\307"+
    "\24\41\45\0\4\41\7\0\4\41\4\0\13\41\1\310"+
    "\7\41\1\311\6\41\45\0\4\41\7\0\4\41\4\0"+
    "\14\41\1\312\1\313\14\41\45\0\4\41\7\0\4\41"+
    "\4\0\6\41\1\314\23\41\45\0\4\41\7\0\4\41"+
    "\4\0\22\41\1\315\7\41\45\0\4\41\7\0\4\41"+
    "\4\0\24\41\1\316\5\41\45\0\4\41\7\0\4\41"+
    "\4\0\21\41\1\317\10\41\45\0\4\41\7\0\4\41"+
    "\4\0\17\41\1\320\3\41\1\321\6\41\45\0\4\41"+
    "\7\0\4\41\4\0\21\41\1\322\10\41\45\0\4\41"+
    "\7\0\4\41\4\0\13\41\1\323\16\41\45\0\4\41"+
    "\7\0\4\41\4\0\15\41\1\324\14\41\45\0\4\41"+
    "\7\0\4\41\4\0\1\41\1\325\7\41\1\326\10\41"+
    "\1\327\7\41\45\0\4\41\7\0\4\41\4\0\1\41"+
    "\1\330\30\41\45\0\4\41\7\0\4\41\4\0\5\41"+
    "\1\331\24\41\45\0\4\41\7\0\4\41\4\0\3\41"+
    "\1\332\26\41\45\0\4\41\7\0\4\41\4\0\2\41"+
    "\1\333\27\41\45\0\4\41\7\0\4\41\4\0\22\41"+
    "\1\334\1\335\6\41\45\0\4\41\7\0\4\41\4\0"+
    "\21\41\1\336\10\41\45\0\4\41\7\0\4\41\4\0"+
    "\22\41\1\337\7\41\45\0\4\41\7\0\4\41\4\0"+
    "\11\41\1\340\20\41\45\0\4\41\7\0\4\41\4\0"+
    "\22\41\1\341\7\41\45\0\4\41\7\0\4\41\4\0"+
    "\21\41\1\342\10\41\45\0\4\41\7\0\4\41\4\0"+
    "\30\41\1\343\1\41\45\0\4\41\7\0\4\41\4\0"+
    "\11\41\1\344\7\41\1\345\10\41\45\0\4\41\7\0"+
    "\4\41\4\0\11\41\1\346\20\41\45\0\4\41\7\0"+
    "\4\41\4\0\21\41\1\347\10\41\45\0\4\41\7\0"+
    "\4\41\4\0\13\41\1\350\16\41\45\0\4\41\7\0"+
    "\4\41\4\0\11\41\1\351\20\41\122\0\1\352\44\0"+
    "\4\353\7\0\2\353\7\0\6\353\145\0\1\354\44\0"+
    "\4\355\7\0\2\355\7\0\6\355\145\0\1\356\44\0"+
    "\4\357\7\0\2\357\7\0\6\357\53\0\1\360\135\0"+
    "\1\361\100\0\2\253\1\0\117\253\22\0\4\265\10\0"+
    "\1\146\6\0\1\145\4\0\1\146\71\0\4\267\116\0"+
    "\4\267\17\0\1\266\76\0\2\270\21\0\1\150\76\0"+
    "\3\271\20\0\1\151\74\0\1\362\1\0\4\272\7\0"+
    "\2\272\1\0\1\146\4\0\1\152\6\272\10\0\1\146"+
    "\66\0\1\363\72\0\1\276\1\0\1\276\35\0\1\364"+
    "\101\0\4\41\7\0\4\41\4\0\21\41\1\365\10\41"+
    "\45\0\4\41\7\0\4\41\4\0\7\41\1\366\22\41"+
    "\45\0\4\41\7\0\4\41\4\0\16\41\1\367\13\41"+
    "\45\0\4\41\7\0\4\41\4\0\6\41\1\370\14\41"+
    "\1\371\6\41\45\0\4\41\7\0\4\41\4\0\15\41"+
    "\1\372\14\41\45\0\4\41\7\0\4\41\4\0\11\41"+
    "\1\373\20\41\45\0\4\41\7\0\4\41\4\0\1\41"+
    "\1\374\30\41\45\0\4\41\7\0\4\41\4\0\13\41"+
    "\1\375\16\41\45\0\4\41\7\0\4\41\4\0\3\41"+
    "\1\376\26\41\45\0\4\41\7\0\4\41\4\0\17\41"+
    "\1\377\12\41\45\0\4\41\7\0\4\41\4\0\22\41"+
    "\1\u0100\1\u0101\6\41\45\0\4\41\7\0\4\41\4\0"+
    "\5\41\1\u0102\24\41\45\0\4\41\7\0\4\41\4\0"+
    "\5\41\1\u0103\24\41\45\0\4\41\7\0\4\41\4\0"+
    "\14\41\1\u0104\15\41\45\0\4\41\7\0\4\41\4\0"+
    "\4\41\1\u0105\11\41\1\u0106\13\41\45\0\4\41\7\0"+
    "\4\41\4\0\16\41\1\u0107\13\41\45\0\4\41\7\0"+
    "\4\41\4\0\5\41\1\u0108\24\41\45\0\4\41\7\0"+
    "\4\41\4\0\11\41\1\u0109\20\41\45\0\4\41\7\0"+
    "\4\41\4\0\12\41\1\u010a\17\41\45\0\4\41\7\0"+
    "\4\41\4\0\13\41\1\u010b\16\41\45\0\4\41\7\0"+
    "\4\41\4\0\15\41\1\u010c\14\41\45\0\4\41\7\0"+
    "\4\41\4\0\24\41\1\u010d\5\41\45\0\4\41\7\0"+
    "\4\41\4\0\20\41\1\u010e\11\41\45\0\4\41\7\0"+
    "\4\41\4\0\13\41\1\u010f\16\41\45\0\4\41\7\0"+
    "\4\41\4\0\12\41\1\u0110\17\41\45\0\4\41\7\0"+
    "\4\41\4\0\24\41\1\u0111\5\41\45\0\4\41\7\0"+
    "\4\41\4\0\24\41\1\u0112\5\41\45\0\4\41\7\0"+
    "\4\41\4\0\24\41\1\u0113\5\41\45\0\4\41\7\0"+
    "\4\41\4\0\17\41\1\u0114\12\41\45\0\4\41\7\0"+
    "\4\41\4\0\23\41\1\u0115\6\41\45\0\4\41\7\0"+
    "\4\41\4\0\23\41\1\u0116\6\41\45\0\4\41\7\0"+
    "\4\41\4\0\5\41\1\u0117\24\41\45\0\4\41\7\0"+
    "\4\41\4\0\16\41\1\u0118\13\41\45\0\4\41\7\0"+
    "\4\41\4\0\5\41\1\u0119\24\41\45\0\4\41\7\0"+
    "\4\41\4\0\15\41\1\u011a\14\41\45\0\4\41\7\0"+
    "\4\41\4\0\1\41\1\u011b\30\41\45\0\4\41\7\0"+
    "\4\41\4\0\13\41\1\u011c\16\41\45\0\4\u011d\7\0"+
    "\2\u011d\7\0\6\u011d\70\0\4\232\7\0\2\232\7\0"+
    "\6\232\70\0\4\u011e\7\0\2\u011e\7\0\6\u011e\70\0"+
    "\4\237\7\0\2\237\7\0\6\237\70\0\4\u011f\7\0"+
    "\2\u011f\7\0\6\u011f\70\0\4\244\7\0\2\244\7\0"+
    "\6\244\46\0\2\360\1\u0120\117\360\2\361\1\u0121\117\361"+
    "\22\0\4\u0122\7\0\2\u0122\7\0\6\u0122\70\0\4\41"+
    "\7\0\4\41\4\0\22\41\1\u0123\7\41\45\0\4\41"+
    "\7\0\4\41\4\0\15\41\1\u0124\14\41\45\0\4\41"+
    "\7\0\4\41\4\0\26\41\1\u0125\3\41\45\0\4\41"+
    "\7\0\4\41\4\0\21\41\1\u0126\10\41\45\0\4\41"+
    "\7\0\4\41\4\0\30\41\1\u0127\1\41\45\0\4\41"+
    "\7\0\4\41\4\0\3\41\1\u0128\26\41\45\0\4\41"+
    "\7\0\4\41\4\0\23\41\1\u0129\6\41\45\0\4\41"+
    "\7\0\4\41\4\0\12\41\1\u012a\17\41\45\0\4\41"+
    "\7\0\4\41\4\0\3\41\1\u012b\26\41\45\0\4\41"+
    "\7\0\4\41\4\0\10\41\1\u012c\21\41\45\0\4\41"+
    "\7\0\4\41\4\0\23\41\1\u012d\6\41\45\0\4\41"+
    "\7\0\4\41\4\0\23\41\1\u012e\6\41\45\0\4\41"+
    "\7\0\4\41\4\0\11\41\1\u012f\20\41\45\0\4\41"+
    "\7\0\4\41\4\0\21\41\1\u0130\10\41\45\0\4\41"+
    "\7\0\4\41\4\0\5\41\1\u0131\24\41\45\0\4\41"+
    "\7\0\4\41\4\0\21\41\1\u0132\10\41\45\0\4\41"+
    "\7\0\4\41\4\0\21\41\1\u0133\10\41\45\0\4\41"+
    "\7\0\4\41\4\0\21\41\1\u0134\10\41\45\0\4\41"+
    "\7\0\4\41\4\0\15\41\1\u0135\14\41\45\0\4\41"+
    "\7\0\4\41\4\0\22\41\1\u0136\7\41\45\0\4\41"+
    "\7\0\4\41\4\0\11\41\1\u0137\20\41\45\0\4\41"+
    "\7\0\4\41\4\0\13\41\1\u0138\16\41\45\0\4\41"+
    "\7\0\4\41\4\0\22\41\1\u0139\7\41\45\0\4\41"+
    "\7\0\4\41\4\0\24\41\1\u013a\5\41\45\0\4\41"+
    "\7\0\4\41\4\0\22\41\1\u013b\7\41\45\0\4\41"+
    "\7\0\4\41\4\0\5\41\1\u013c\24\41\45\0\4\41"+
    "\7\0\4\41\4\0\14\41\1\u013d\15\41\45\0\4\41"+
    "\7\0\4\41\4\0\21\41\1\u013e\10\41\45\0\4\41"+
    "\7\0\4\41\4\0\3\41\1\u013f\26\41\45\0\4\41"+
    "\7\0\4\41\4\0\5\41\1\u0140\24\41\45\0\4\41"+
    "\7\0\4\41\4\0\3\41\1\u0141\26\41\45\0\4\41"+
    "\7\0\4\41\4\0\1\41\1\u0142\30\41\45\0\4\41"+
    "\7\0\4\41\4\0\15\41\1\u0143\14\41\45\0\4\41"+
    "\7\0\4\41\4\0\1\41\1\u0144\30\41\45\0\4\41"+
    "\7\0\4\41\4\0\7\41\1\u0145\22\41\45\0\4\41"+
    "\7\0\4\41\4\0\23\41\1\u0146\6\41\45\0\4\41"+
    "\7\0\4\41\4\0\5\41\1\u0147\24\41\45\0\4\u011d"+
    "\7\0\2\u011d\7\0\6\u011d\25\0\1\232\42\0\4\u011e"+
    "\7\0\2\u011e\7\0\6\u011e\25\0\1\237\42\0\4\u011f"+
    "\7\0\2\u011f\7\0\6\u011f\25\0\1\244\22\0\1\u0120"+
    "\1\0\1\u0120\14\0\1\u0148\102\0\1\u0121\1\0\1\u0121"+
    "\14\0\1\u0149\122\0\4\u0122\7\0\2\u0122\1\0\1\146"+
    "\4\0\1\362\6\u0122\10\0\1\146\57\0\4\41\7\0"+
    "\4\41\4\0\17\41\1\u014a\12\41\45\0\4\41\7\0"+
    "\4\41\4\0\31\41\1\u014b\45\0\4\41\7\0\4\41"+
    "\4\0\1\41\1\u014c\30\41\45\0\4\41\7\0\4\41"+
    "\4\0\17\41\1\u014d\12\41\45\0\4\41\7\0\4\41"+
    "\4\0\16\41\1\u014e\13\41\45\0\4\41\7\0\4\41"+
    "\4\0\11\41\1\u014f\20\41\45\0\4\41\7\0\4\41"+
    "\4\0\15\41\1\u0150\14\41\45\0\4\41\7\0\4\41"+
    "\4\0\6\41\1\u0151\23\41\45\0\4\41\7\0\4\41"+
    "\4\0\23\41\1\u0152\6\41\45\0\4\41\7\0\4\41"+
    "\4\0\15\41\1\u0153\14\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u0154\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u0155\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\1\41\1\u0156\30\41\45\0\4\41\7\0\4\41"+
    "\4\0\11\41\1\u0157\20\41\45\0\4\41\7\0\4\41"+
    "\4\0\17\41\1\u0158\12\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u0159\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u015a\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\4\41\1\u015b\25\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u015c\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\15\41\1\u015d\14\41\45\0\4\41\7\0\4\41"+
    "\4\0\23\41\1\u015e\6\41\45\0\4\41\7\0\4\41"+
    "\4\0\15\41\1\u015f\14\41\45\0\4\41\7\0\4\41"+
    "\4\0\10\41\1\u0160\21\41\45\0\4\41\7\0\4\41"+
    "\4\0\4\41\1\u0161\25\41\45\0\4\41\7\0\4\41"+
    "\4\0\3\41\1\u0162\26\41\45\0\4\41\7\0\4\41"+
    "\4\0\15\41\1\u0163\14\41\45\0\4\41\7\0\4\41"+
    "\4\0\11\41\1\u0164\20\41\45\0\4\41\7\0\4\41"+
    "\4\0\1\41\1\u0165\30\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u0166\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\14\41\1\u0167\15\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u0168\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\15\41\1\u0169\14\41\45\0\4\41\7\0\4\41"+
    "\4\0\14\41\1\u016a\15\41\45\0\4\41\7\0\4\41"+
    "\4\0\24\41\1\u016b\5\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u016c\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\3\41\1\u016d\26\41\45\0\4\41\7\0\4\41"+
    "\4\0\22\41\1\u016e\7\41\45\0\4\41\7\0\4\41"+
    "\4\0\15\41\1\u016f\14\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u0170\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\4\41\1\u0171\25\41\45\0\4\41\7\0\4\41"+
    "\4\0\13\41\1\u0172\16\41\45\0\4\41\7\0\4\41"+
    "\4\0\10\41\1\u0173\21\41\45\0\4\41\7\0\4\41"+
    "\4\0\1\41\1\u0174\30\41\45\0\4\41\7\0\4\41"+
    "\4\0\13\41\1\u0175\16\41\45\0\4\41\7\0\4\41"+
    "\4\0\3\41\1\u0176\26\41\45\0\4\41\7\0\4\41"+
    "\4\0\21\41\1\u0177\10\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u0178\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\25\41\1\u0179\4\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u017a\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u017b\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\21\41\1\u017c\10\41\45\0\4\41\7\0\4\41"+
    "\4\0\23\41\1\u017d\6\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u017e\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\15\41\1\u017f\14\41\45\0\4\41\7\0\4\41"+
    "\4\0\16\41\1\u0180\13\41\45\0\4\41\7\0\4\41"+
    "\4\0\1\41\1\u0181\30\41\45\0\4\41\7\0\4\41"+
    "\4\0\14\41\1\u0182\15\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u0183\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u0184\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\16\41\1\u0185\13\41\45\0\4\41\7\0\4\41"+
    "\4\0\11\41\1\u0186\20\41\45\0\4\41\7\0\4\41"+
    "\4\0\4\41\1\u0187\25\41\45\0\4\41\7\0\4\41"+
    "\4\0\3\41\1\u0188\26\41\45\0\4\41\7\0\4\41"+
    "\4\0\2\41\1\u0189\27\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u018a\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\16\41\1\u018b\13\41\45\0\4\41\7\0\4\41"+
    "\4\0\1\41\1\u018c\30\41\45\0\4\41\7\0\4\41"+
    "\4\0\13\41\1\u018d\16\41\45\0\4\41\7\0\4\41"+
    "\4\0\22\41\1\u018e\7\41\45\0\4\41\7\0\4\41"+
    "\4\0\15\41\1\u018f\14\41\45\0\4\41\7\0\4\41"+
    "\4\0\13\41\1\u0190\16\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u0191\24\41\45\0\4\41\7\0\4\41"+
    "\4\0\17\41\1\u0192\12\41\45\0\4\41\7\0\4\41"+
    "\4\0\1\41\1\u0193\30\41\45\0\4\41\7\0\4\41"+
    "\4\0\3\41\1\u0194\26\41\45\0\4\41\7\0\4\41"+
    "\4\0\5\41\1\u0195\24\41\23\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[24190];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\2\1\1\11\2\1\3\11\2\1\1\11"+
    "\5\1\2\11\3\1\1\11\2\1\1\11\1\1\1\11"+
    "\22\1\1\11\1\1\2\11\1\1\2\11\13\1\1\11"+
    "\2\1\1\11\4\1\3\11\1\1\2\11\2\1\2\11"+
    "\2\1\2\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\6\0\1\1\4\11\1\1\1\11\2\1\1\11\43\1"+
    "\2\11\4\0\1\11\14\0\1\1\11\11\1\1\1\0"+
    "\4\1\1\11\1\1\1\11\54\1\6\0\2\1\1\0"+
    "\1\11\1\0\50\1\3\0\50\1\2\0\114\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ZigFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 134: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 135: break;
          case 3:
            { return EXCLAMATIONMARK;
            }
          // fall through
          case 136: break;
          case 4:
            { yybegin(STR_LIT);
            }
          // fall through
          case 137: break;
          case 5:
            { return PERCENT;
            }
          // fall through
          case 138: break;
          case 6:
            { return AMPERSAND;
            }
          // fall through
          case 139: break;
          case 7:
            { yybegin(CHAR_LIT);
            }
          // fall through
          case 140: break;
          case 8:
            { return LPAREN;
            }
          // fall through
          case 141: break;
          case 9:
            { return RPAREN;
            }
          // fall through
          case 142: break;
          case 10:
            { return ASTERISK;
            }
          // fall through
          case 143: break;
          case 11:
            { return PLUS;
            }
          // fall through
          case 144: break;
          case 12:
            { return COMMA;
            }
          // fall through
          case 145: break;
          case 13:
            { return MINUS;
            }
          // fall through
          case 146: break;
          case 14:
            { return DOT;
            }
          // fall through
          case 147: break;
          case 15:
            { return SLASH;
            }
          // fall through
          case 148: break;
          case 16:
            { return INTEGER;
            }
          // fall through
          case 149: break;
          case 17:
            { return COLON;
            }
          // fall through
          case 150: break;
          case 18:
            { return SEMICOLON;
            }
          // fall through
          case 151: break;
          case 19:
            { return LARROW;
            }
          // fall through
          case 152: break;
          case 20:
            { return EQUAL;
            }
          // fall through
          case 153: break;
          case 21:
            { return RARROW;
            }
          // fall through
          case 154: break;
          case 22:
            { return QUESTIONMARK;
            }
          // fall through
          case 155: break;
          case 23:
            { return IDENTIFIER;
            }
          // fall through
          case 156: break;
          case 24:
            { return LBRACKET;
            }
          // fall through
          case 157: break;
          case 25:
            { return RBRACKET;
            }
          // fall through
          case 158: break;
          case 26:
            { return CARET;
            }
          // fall through
          case 159: break;
          case 27:
            { return LBRACE;
            }
          // fall through
          case 160: break;
          case 28:
            { return PIPE;
            }
          // fall through
          case 161: break;
          case 29:
            { return RBRACE;
            }
          // fall through
          case 162: break;
          case 30:
            { return TILDE;
            }
          // fall through
          case 163: break;
          case 31:
            { yypushback(1); yybegin(UNT_QUOT);
            }
          // fall through
          case 164: break;
          case 32:
            { yybegin(YYINITIAL); return STRING_LITERAL_SINGLE;
            }
          // fall through
          case 165: break;
          case 33:
            { yybegin(YYINITIAL); return IDENTIFIER;
            }
          // fall through
          case 166: break;
          case 34:
            { yybegin(YYINITIAL); return BAD_CHARACTER;
            }
          // fall through
          case 167: break;
          case 35:
            { return EXCLAMATIONMARKEQUAL;
            }
          // fall through
          case 168: break;
          case 36:
            { return PERCENTEQUAL;
            }
          // fall through
          case 169: break;
          case 37:
            { return AMPERSANDEQUAL;
            }
          // fall through
          case 170: break;
          case 38:
            { return ASTERISKPERCENT;
            }
          // fall through
          case 171: break;
          case 39:
            { return ASTERISK2;
            }
          // fall through
          case 172: break;
          case 40:
            { return ASTERISKEQUAL;
            }
          // fall through
          case 173: break;
          case 41:
            { return ASTERISKPIPE;
            }
          // fall through
          case 174: break;
          case 42:
            { return PLUSPERCENT;
            }
          // fall through
          case 175: break;
          case 43:
            { return PLUS2;
            }
          // fall through
          case 176: break;
          case 44:
            { return PLUSEQUAL;
            }
          // fall through
          case 177: break;
          case 45:
            { return PLUSPIPE;
            }
          // fall through
          case 178: break;
          case 46:
            { return MINUSPERCENT;
            }
          // fall through
          case 179: break;
          case 47:
            { return MINUSEQUAL;
            }
          // fall through
          case 180: break;
          case 48:
            { return MINUSRARROW;
            }
          // fall through
          case 181: break;
          case 49:
            { return MINUSPIPE;
            }
          // fall through
          case 182: break;
          case 50:
            { return DOTASTERISK;
            }
          // fall through
          case 183: break;
          case 51:
            { return DOT2;
            }
          // fall through
          case 184: break;
          case 52:
            { return DOTQUESTIONMARK;
            }
          // fall through
          case 185: break;
          case 53:
            { yypushback(2); yybegin(LINE_CMT);
            }
          // fall through
          case 186: break;
          case 54:
            { return SLASHEQUAL;
            }
          // fall through
          case 187: break;
          case 55:
            { return LARROW2;
            }
          // fall through
          case 188: break;
          case 56:
            { return LARROWEQUAL;
            }
          // fall through
          case 189: break;
          case 57:
            { return EQUALEQUAL;
            }
          // fall through
          case 190: break;
          case 58:
            { return EQUALRARROW;
            }
          // fall through
          case 191: break;
          case 59:
            { return RARROWEQUAL;
            }
          // fall through
          case 192: break;
          case 60:
            { return RARROW2;
            }
          // fall through
          case 193: break;
          case 61:
            { yybegin(ID_QUOT);
            }
          // fall through
          case 194: break;
          case 62:
            { return BUILTINIDENTIFIER;
            }
          // fall through
          case 195: break;
          case 63:
            { return STRING_LITERAL_MULTI;
            }
          // fall through
          case 196: break;
          case 64:
            { return CARETEQUAL;
            }
          // fall through
          case 197: break;
          case 65:
            { return KEYWORD_FN;
            }
          // fall through
          case 198: break;
          case 66:
            { return KEYWORD_IF;
            }
          // fall through
          case 199: break;
          case 67:
            { return KEYWORD_OR;
            }
          // fall through
          case 200: break;
          case 68:
            { return PIPEEQUAL;
            }
          // fall through
          case 201: break;
          case 69:
            { return PIPE2;
            }
          // fall through
          case 202: break;
          case 70:
            { yybegin(YYINITIAL); return CHAR_LITERAL;
            }
          // fall through
          case 203: break;
          case 71:
            { yybegin(YYINITIAL); return LINE_COMMENT;
            }
          // fall through
          case 204: break;
          case 72:
            { return ASTERISKPERCENTEQUAL;
            }
          // fall through
          case 205: break;
          case 73:
            { return ASTERISKPIPEEQUAL;
            }
          // fall through
          case 206: break;
          case 74:
            { return PLUSPERCENTEQUAL;
            }
          // fall through
          case 207: break;
          case 75:
            { return PLUSPIPEEQUAL;
            }
          // fall through
          case 208: break;
          case 76:
            { return MINUSPERCENTEQUAL;
            }
          // fall through
          case 209: break;
          case 77:
            { return MINUSPIPEEQUAL;
            }
          // fall through
          case 210: break;
          case 78:
            { return DOT3;
            }
          // fall through
          case 211: break;
          case 79:
            { yypushback(3); yybegin(CDOC_CMT);
            }
          // fall through
          case 212: break;
          case 80:
            { yypushback(3); yybegin(DOC_CMT);
            }
          // fall through
          case 213: break;
          case 81:
            { return FLOAT;
            }
          // fall through
          case 214: break;
          case 82:
            { return LARROW2EQUAL;
            }
          // fall through
          case 215: break;
          case 83:
            { return LARROW2PIPE;
            }
          // fall through
          case 216: break;
          case 84:
            { return RARROW2EQUAL;
            }
          // fall through
          case 217: break;
          case 85:
            { return KEYWORD_AND;
            }
          // fall through
          case 218: break;
          case 86:
            { return KEYWORD_ASM;
            }
          // fall through
          case 219: break;
          case 87:
            { return KEYWORD_FOR;
            }
          // fall through
          case 220: break;
          case 88:
            { return KEYWORD_PUB;
            }
          // fall through
          case 221: break;
          case 89:
            { return KEYWORD_TRY;
            }
          // fall through
          case 222: break;
          case 90:
            { return KEYWORD_VAR;
            }
          // fall through
          case 223: break;
          case 91:
            { yybegin(YYINITIAL); return CONTAINER_DOC_COMMENT;
            }
          // fall through
          case 224: break;
          case 92:
            { yybegin(YYINITIAL); return DOC_COMMENT;
            }
          // fall through
          case 225: break;
          case 93:
            { return LARROW2PIPEEQUAL;
            }
          // fall through
          case 226: break;
          case 94:
            { return KEYWORD_ELSE;
            }
          // fall through
          case 227: break;
          case 95:
            { return KEYWORD_ENUM;
            }
          // fall through
          case 228: break;
          case 96:
            { return KEYWORD_TEST;
            }
          // fall through
          case 229: break;
          case 97:
            { return KEYWORD_ALIGN;
            }
          // fall through
          case 230: break;
          case 98:
            { return KEYWORD_ASYNC;
            }
          // fall through
          case 231: break;
          case 99:
            { return KEYWORD_AWAIT;
            }
          // fall through
          case 232: break;
          case 100:
            { return KEYWORD_BREAK;
            }
          // fall through
          case 233: break;
          case 101:
            { return KEYWORD_CATCH;
            }
          // fall through
          case 234: break;
          case 102:
            { return KEYWORD_CONST;
            }
          // fall through
          case 235: break;
          case 103:
            { return KEYWORD_DEFER;
            }
          // fall through
          case 236: break;
          case 104:
            { return KEYWORD_ERROR;
            }
          // fall through
          case 237: break;
          case 105:
            { return KEYWORD_UNION;
            }
          // fall through
          case 238: break;
          case 106:
            { return KEYWORD_WHILE;
            }
          // fall through
          case 239: break;
          case 107:
            { return KEYWORD_EXPORT;
            }
          // fall through
          case 240: break;
          case 108:
            { return KEYWORD_EXTERN;
            }
          // fall through
          case 241: break;
          case 109:
            { return KEYWORD_INLINE;
            }
          // fall through
          case 242: break;
          case 110:
            { return KEYWORD_OPAQUE;
            }
          // fall through
          case 243: break;
          case 111:
            { return KEYWORD_ORELSE;
            }
          // fall through
          case 244: break;
          case 112:
            { return KEYWORD_PACKED;
            }
          // fall through
          case 245: break;
          case 113:
            { return KEYWORD_RESUME;
            }
          // fall through
          case 246: break;
          case 114:
            { return KEYWORD_RETURN;
            }
          // fall through
          case 247: break;
          case 115:
            { return KEYWORD_STRUCT;
            }
          // fall through
          case 248: break;
          case 116:
            { return KEYWORD_SWITCH;
            }
          // fall through
          case 249: break;
          case 117:
            { return KEYWORD_ANYTYPE;
            }
          // fall through
          case 250: break;
          case 118:
            { return KEYWORD_NOALIAS;
            }
          // fall through
          case 251: break;
          case 119:
            { return KEYWORD_SUSPEND;
            }
          // fall through
          case 252: break;
          case 120:
            { return KEYWORD_ANYFRAME;
            }
          // fall through
          case 253: break;
          case 121:
            { return KEYWORD_CALLCONV;
            }
          // fall through
          case 254: break;
          case 122:
            { return KEYWORD_COMPTIME;
            }
          // fall through
          case 255: break;
          case 123:
            { return KEYWORD_CONTINUE;
            }
          // fall through
          case 256: break;
          case 124:
            { return KEYWORD_ERRDEFER;
            }
          // fall through
          case 257: break;
          case 125:
            { return KEYWORD_NOINLINE;
            }
          // fall through
          case 258: break;
          case 126:
            { return KEYWORD_VOLATILE;
            }
          // fall through
          case 259: break;
          case 127:
            { return KEYWORD_ADDRSPACE;
            }
          // fall through
          case 260: break;
          case 128:
            { return KEYWORD_ALLOWZERO;
            }
          // fall through
          case 261: break;
          case 129:
            { return KEYWORD_NOSUSPEND;
            }
          // fall through
          case 262: break;
          case 130:
            { return KEYWORD_LINKSECTION;
            }
          // fall through
          case 263: break;
          case 131:
            { return KEYWORD_THREADLOCAL;
            }
          // fall through
          case 264: break;
          case 132:
            { return KEYWORD_UNREACHABLE;
            }
          // fall through
          case 265: break;
          case 133:
            { return KEYWORD_USINGNAMESPACE;
            }
          // fall through
          case 266: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
